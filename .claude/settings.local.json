{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(true)",
      "Bash(yarn install)",
      "Bash(npm init:*)",
      "Bash(npm run build:*)",
      "Bash(npm install)",
      "Bash(rm:*)",
      "Bash(docker compose:*)",
      "Bash(mkdir:*)",
      "Bash(npm install:*)",
      "Bash(npm run dev:*)",
      "Bash(npx next:*)",
      "Bash(ls:*)",
      "Bash(node:*)",
      "Bash(mv:*)",
      "Bash(npx tsc:*)",
      "Bash(timeout 30s npm run dev)",
      "Bash(curl:*)",
      "WebFetch(domain:www4.mundodosvistos.com.br)",
      "Bash(npm ls:*)",
      "Bash(npm run lint)",
      "Bash(grep:*)",
      "Bash(sed:*)",
      "Bash(rg:*)",
      "Bash(npx prisma generate:*)",
      "Bash(npx prisma migrate dev:*)",
      "Bash(pkill:*)",
      "Bash(sqlite3:*)",
      "Bash(touch:*)",
      "Bash(timeout 15s npm run dev)",
      "Bash(npx prisma db push:*)",
      "Bash(cp:*)",
      "Bash(ss:*)",
      "Bash(kill:*)",
      "Bash(npx prisma studio:*)",
      "Bash(chmod:*)",
      "Bash(docker-compose ps:*)",
      "Bash(apt-get:*)",
      "Bash(apt-get install:*)",
      "Bash(apt list:*)",
      "Bash(timeout 10s npm run whatsapp)",
      "Bash(timeout:*)",
      "Bash(npm run:*)",
      "Bash(for file in *.json)",
      "Bash(do if grep -q \"n8n-nodes-base.postgres\" \"$file\")",
      "Bash(then echo \"PostgreSQL found in: $file\")",
      "Bash(fi)",
      "Bash(done)",
      "Bash(npm audit:*)",
      "Bash(npm outdated)",
      "Bash(npx prisma db pull:*)",
      "Bash(npm update:*)",
      "Bash(npm cache clean:*)",
      "Bash(npx typescript:*)",
      "Bash(awk:*)",
      "Bash(cat:*)",
      "Bash(NODE_OPTIONS=\"--max-old-space-size=4096\" NEXT_TELEMETRY_DISABLED=1 timeout 30s npm run dev)",
      "Bash(NEXT_TELEMETRY_DISABLED=1 timeout 20s npm run dev 2 >& 1)",
      "WebFetch(domain:travel.state.gov)",
      "WebFetch(domain:www.schengen-visa.com)",
      "WebFetch(domain:www.canada.ca)",
      "WebFetch(domain:europa.eu)",
      "Bash(./start-n8n.sh:*)",
      "Bash(npm:*)",
      "Bash(do echo \"=== Checking $file ===\")",
      "Bash(python3:*)",
      "Bash(/dev/null)",
      "Bash(echo:*)",
      "Bash(for file in lead-intelligence-enrichment.json appointment-cancellation-monitor.json document-processing-automation-corrected.json payment-billing-automation-corrected.json waitlist-management.json revenue-optimization.json vaga-express-analytics.json vaga-express-product.json proactive-client-care.json multi-channel-orchestration.json legal-monitor.json internal-crm-enhancement.json)",
      "Bash(do echo \"=== Fixing $file ===\")",
      "Bash(do)",
      "Bash(if ! grep -q '\"\"description\"\"' \"$file\")",
      "Bash(then)",
      "Bash(if [ \"$file\" != \"README.md\" ])",
      "Bash(else)",
      "Bash(for file in appointment-cancellation-monitor.json blog-auto-monitoring.json client-journey-fixed.json client-notifications-sqlite.json document-processing-automation-corrected.json internal-crm-enhancement.json lead-intelligence-enrichment.json legal-monitor.json multi-channel-orchestration.json proactive-client-care.json revenue-optimization.json vaga-express-analytics.json vaga-express-product.json waitlist-management.json whatsapp-integration-corrected.json)",
      "Bash(do echo \"Adding description to $file\")",
      "Bash(for:*)",
      "Bash(npx prisma migrate reset:*)",
      "Bash(git init:*)",
      "Bash(git branch:*)",
      "Bash(git config:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git remote add:*)",
      "Bash(git push:*)",
      "Bash(yarn run:*)",
      "WebFetch(domain:vercel.com)",
      "Bash(gh repo view:*)",
      "Bash(vercel:*)",
      "Bash(vercel ls:*)",
      "Bash(npx eslint:*)",
      "Bash(# Create a backup first\ncp -r src/app/api src/app/api_backup_$(date +%Y%m%d_%H%M%S)\n\n# Fix pattern 1: NextResponse.json missing comma between objects\n# Pattern: }\\n  { status: -> },\\n  { status:\nfind src/app/api -name \"*.ts\" -exec sed -i 's/}\\n  { status:/},\\n  { status:/g' {} \\;\n\n# Pattern: }\\n    { status: -> },\\n    { status:\nfind src/app/api -name \"*.ts\" -exec sed -i 's/}\\n    { status:/},\\n    { status:/g' {} \\;\n\n# Pattern: }\\n      { status: -> },\\n      { status:\nfind src/app/api -name \"*.ts\" -exec sed -i 's/}\\n      { status:/},\\n      { status:/g' {} \\;\n\necho \"Fixed NextResponse.json patterns\")",
      "Bash(# Fix more complex patterns using sed with backslash-escaped newlines\n# Fix pattern: property: value\\n  property: -> property: value,\\n  property:\nfind src/app/api -name \"*.ts\" -exec sed -i '/: [^,{]*$/N;s/: \\([^,{]*\\)\\n  \\([a-zA-Z_][a-zA-Z0-9_]*:\\)/: \\1,\\n  \\2/g' {} \\;\n\n# Fix array elements missing commas\nfind src/app/api -name \"*.ts\" -exec sed -i '/]$/!N;s/}\\n    {/},\\n    {/g' {} \\;\nfind src/app/api -name \"*.ts\" -exec sed -i '/]$/!N;s/}\\n  {/},\\n  {/g' {} \\;\n\n# Fix Promise.all patterns\nfind src/app/api -name \"*.ts\" -exec sed -i 's/\\]\\)\\n  prisma\\./]),\\n  prisma./g' {} \\;\n\necho \"Fixed object and array patterns\")",
      "Bash(# CORREÇÃO DEFINITIVA - Eliminar TODOS os padrões de vírgula faltando\n\n# Pattern 1: Propriedade sem vírgula seguida de outra propriedade\nfind src/app/api -name \"*.ts\" -exec perl -i -pe 's/^(\\s+)([a-zA-Z_][a-zA-Z0-9_]*:\\s*[^,\\n]*[^,\\s])\\n(\\s*)([a-zA-Z_][a-zA-Z0-9_]*:)/$1$2,\\n$3$4/g' {} \\;\n\n# Pattern 2: Valor sem vírgula seguido de propriedade\nfind src/app/api -name \"*.ts\" -exec perl -i -pe 's/:\\s*([^,\\n{}\\[\\]]+)\\n(\\s*)([a-zA-Z_][a-zA-Z0-9_]*:)/: $1,\\n$2$3/g' {} \\;\n\n# Pattern 3: true/false/números sem vírgula\nfind src/app/api -name \"*.ts\" -exec perl -i -pe 's/:\\s*(true|false|\\d+)\\n(\\s*)([a-zA-Z_][a-zA-Z0-9_]*:)/: $1,\\n$2$3/g' {} \\;\n\n# Pattern 4: Strings sem vírgula\nfind src/app/api -name \"*.ts\" -exec perl -i -pe 's/:\\s*([\\'\"\"][^'\"'\"'\"]*[\\'\"\"])\\n(\\s*)([a-zA-Z_][a-zA-Z0-9_]*:)/: $1,\\n$2$3/g' {} \\;\n\n# Pattern 5: Arrays sem vírgula\nfind src/app/api -name \"*.ts\" -exec perl -i -pe 's/:\\s*(\\[[^\\]]*\\])\\n(\\s*)([a-zA-Z_][a-zA-Z0-9_]*:)/: $1,\\n$2$3/g' {} \\;\n\n# Pattern 6: Objetos sem vírgula seguido de closing brace\nfind src/app/api -name \"*.ts\" -exec perl -i -pe 's/^(\\s+)([a-zA-Z_][a-zA-Z0-9_]*:\\s*[^,\\n]*[^,\\s])\\n(\\s*)\\}/$1$2\\n$3}/g' {} \\;\n\necho \"Aplicadas correções abrangentes com Perl\")",
      "Bash(# ELIMINAÇÃO DEFINITIVA - Usar sed com padrões específicos para TODOS os casos\n\n# Fix 1: Missing commas in Prisma where clauses\nfind src/app/api -name \"*.ts\" -exec sed -i 's/}\\n      [a-zA-Z]/},\\n      &/g' {} \\;\n\n# Fix 2: Missing commas between object properties  \nfind src/app/api -name \"*.ts\" -exec sed -i 's/: [^,{}\\[\\]]*\\n    [a-zA-Z]/&,/g' {} \\;\n\n# Fix 3: Missing commas before closing object properties\nfind src/app/api -name \"*.ts\" -exec sed -i 's/\\n      [a-zA-Z][a-zA-Z_]*:/,\\n      &/g' {} \\;\n\n# Fix 4: Fix function parameters (remove leading commas)\nfind src/app/api -name \"*.ts\" -exec sed -i 's/export async function [A-Z]*(/&/g; s/(,/(/g' {} \\;\n\n# Fix 5: Fix trailing commas in statements\nfind src/app/api -name \"*.ts\" -exec sed -i 's/score += [0-9]*, *$/&/g; s/,$//' {} \\;\n\necho \"Applied comprehensive fixes for ALL patterns\")",
      "Bash(time npx tsc --noEmit --skipLibCheck)",
      "Bash(time npm run type-check:fast)",
      "Bash(time npm run type-check:ultra)",
      "Bash(tar:*)",
      "WebFetch(domain:visa2any1-visa2anys-projects.vercel.app)",
      "Bash(do echo \"Fixing $file\")",
      "Bash(NEXT_DISABLE_FONT_OPTIMIZATION=true npm run build)",
      "Bash(NODE_ENV=production timeout 120 npx next build)"
    ],
    "deny": []
  }
}