#!/usr/bin/env node

/**
 * üõ†Ô∏è CORRETOR AUTOM√ÅTICO DE COMENT√ÅRIOS PORTUGUESES MALFORMADOS
 * 
 * Este script corrige automaticamente o padr√£o cr√≠tico:
 * // comment, code  ‚Üí  // comment\ncode
 * 
 * Baseado nas corre√ß√µes aplicadas em 2025-06-27
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

function getIndentation(line) {
  const match = line.match(/^(\s*)/);
  return match ? match[1] : '';
}

function fixMalformedComments(filePath, dryRun = false) {
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è Arquivo n√£o encontrado: ${filePath}`);
    return { fixed: 0, errors: [] };
  }

  const originalContent = fs.readFileSync(filePath, 'utf8');
  let content = originalContent;
  let fixCount = 0;
  const fixes = [];

  // Padr√£o principal: // comment, code
  const mainPattern = /(^(\s*)\/\/[^,\n]+),(\s+)([a-zA-Z<].*)/gm;
  
  content = content.replace(mainPattern, (match, fullMatch, indentation, spaces, code) => {
    const comment = fullMatch.replace(/,\s*$/, ''); // Remove v√≠rgula do final
    const fix = `${comment}\n${indentation}${code}`;
    
    fixes.push({
      original: match.trim(),
      fixed: fix.trim(),
      pattern: 'comment-code-same-line'
    });
    
    fixCount++;
    return fix;
  });

  // Padr√£o espec√≠fico para JSX: // comment, <element>
  const jsxPattern = /(^(\s*)\/\/[^,\n]+),(\s+)(<.*)/gm;
  
  content = content.replace(jsxPattern, (match, fullMatch, indentation, spaces, jsx) => {
    const comment = fullMatch.replace(/,\s*$/, '');
    const fix = `${comment}\n${indentation}${jsx}`;
    
    fixes.push({
      original: match.trim(),
      fixed: fix.trim(),
      pattern: 'comment-jsx-same-line'
    });
    
    fixCount++;
    return fix;
  });

  // Padr√£o para fun√ß√µes: // comment, function_name: (params) => {
  const functionPattern = /(^(\s*)\/\/[^,\n]+),(\s+)(\w+:\s*\([^)]*\)\s*=>\s*{)/gm;
  
  content = content.replace(functionPattern, (match, fullMatch, indentation, spaces, func) => {
    const comment = fullMatch.replace(/,\s*$/, '');
    const fix = `${comment}\n${indentation}${func}`;
    
    fixes.push({
      original: match.trim(),
      fixed: fix.trim(),
      pattern: 'comment-function-same-line'
    });
    
    fixCount++;
    return fix;
  });

  if (dryRun) {
    return { 
      fixed: fixCount, 
      errors: [], 
      fixes: fixes,
      wouldChange: content !== originalContent 
    };
  }

  if (content !== originalContent) {
    try {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ ${filePath}: ${fixCount} coment√°rios corrigidos`);
    } catch (error) {
      return { 
        fixed: 0, 
        errors: [`Erro ao escrever arquivo: ${error.message}`] 
      };
    }
  } else {
    console.log(`‚ú® ${filePath}: Nenhum coment√°rio malformado encontrado`);
  }

  return { fixed: fixCount, errors: [], fixes: fixes };
}

function fixAllMalformedComments(dryRun = false) {
  console.log(dryRun ? 
    'üîç SIMULANDO CORRE√á√ÉO DE COMENT√ÅRIOS MALFORMADOS...\n' : 
    'üõ†Ô∏è CORRIGINDO COMENT√ÅRIOS MALFORMADOS...\n'
  );
  
  let totalFixed = 0;
  let affectedFiles = 0;
  const allErrors = [];

  try {
    // Buscar todos os arquivos TypeScript/TSX
    const command = `find src -name "*.ts" -o -name "*.tsx" | grep -v node_modules`;
    const files = execSync(command, { encoding: 'utf8' }).trim().split('\n').filter(f => f);

    console.log(`üìÅ Processando ${files.length} arquivos...\n`);

    files.forEach(filePath => {
      const result = fixMalformedComments(filePath, dryRun);
      
      if (result.fixed > 0) {
        totalFixed += result.fixed;
        affectedFiles++;
        
        if (dryRun && result.fixes.length > 0) {
          console.log(`üîç ${filePath} (${result.fixed} corre√ß√µes seriam aplicadas):`);
          result.fixes.forEach(fix => {
            console.log(`   ‚ùå ${fix.original}`);
            console.log(`   ‚úÖ ${fix.fixed.replace('\n', '\\n')}`);
            console.log('');
          });
        }
      }
      
      if (result.errors.length > 0) {
        allErrors.push(...result.errors);
      }
    });

    // Relat√≥rio final
    console.log('\nüìä RELAT√ìRIO FINAL:');
    console.log(`‚úÖ Coment√°rios ${dryRun ? 'que seriam corrigidos' : 'corrigidos'}: ${totalFixed}`);
    console.log(`üìÅ Arquivos ${dryRun ? 'que seriam afetados' : 'afetados'}: ${affectedFiles}`);
    
    if (allErrors.length > 0) {
      console.log(`‚ùå Erros encontrados: ${allErrors.length}`);
      allErrors.forEach(error => console.log(`   ${error}`));
    }

    if (!dryRun && totalFixed > 0) {
      console.log('\nüéâ CORRE√á√ÉO CONCLU√çDA!');
      console.log('üìã Pr√≥ximos passos:');
      console.log('1. npm run type-check  # Verificar se n√£o h√° erros TypeScript');
      console.log('2. npm run build       # Verificar se build funciona');
      console.log('3. git add -A && git commit -m "fix: resolve malformed Portuguese comments"');
    } else if (dryRun && totalFixed > 0) {
      console.log('\nüí° Para aplicar as corre√ß√µes, execute:');
      console.log('node scripts/fix-malformed-comments.js --apply');
    } else if (totalFixed === 0) {
      console.log('\n‚ú® Nenhum coment√°rio malformado encontrado!');
      console.log('‚úÖ C√≥digo est√° limpo para coment√°rios portugueses.');
    }

    return totalFixed > 0;

  } catch (error) {
    console.error('‚ùå Erro ao executar corre√ß√£o:', error.message);
    return false;
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  const args = process.argv.slice(2);
  const dryRun = !args.includes('--apply');
  
  if (dryRun) {
    console.log('‚ÑπÔ∏è Modo simula√ß√£o ativo. Use --apply para aplicar as corre√ß√µes.\n');
  }
  
  const hasChanges = fixAllMalformedComments(dryRun);
  process.exit(hasChanges && dryRun ? 1 : 0);
}

module.exports = { fixMalformedComments, fixAllMalformedComments };