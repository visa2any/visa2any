{
  "description": "N8N workflow for Visa2Any automation platform",
  "name": "Appointment Cancellation Monitor - Fixed",
  "version": 1,
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "*/2 * * * *"
            }
          ]
        }
      },
      "id": "check-every-2min",
      "name": "Check Every 2 Minutes",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        220,
        300
      ],
      "description": ""
    },
    {
      "parameters": {
        "jsCode": "// Define US consulate appointment endpoints\nconst appointmentSources = [\n  {\n    country: 'USA',\n    consulate: 'US Consulate São Paulo',\n    city: 'São Paulo',\n    endpoint: 'https://ais.usvisa-info.com/en-br/niv/schedule',\n    visaTypes: ['B1/B2', 'F1', 'H1B', 'L1', 'O1'],\n    method: 'GET',\n    headers: {\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n      'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',\n      'Accept-Encoding': 'gzip, deflate, br',\n      'Cache-Control': 'no-cache',\n      'Pragma': 'no-cache'\n    },\n    checkType: 'CALENDAR_SCAN'\n  },\n  {\n    country: 'USA',\n    consulate: 'US Consulate Rio de Janeiro',\n    city: 'Rio de Janeiro',\n    endpoint: 'https://ais.usvisa-info.com/en-br/niv/schedule',\n    visaTypes: ['B1/B2', 'F1', 'H1B'],\n    method: 'GET',\n    headers: {\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n    },\n    checkType: 'CALENDAR_SCAN'\n  },\n  {\n    country: 'CANADA',\n    consulate: 'VFS Global São Paulo',\n    city: 'São Paulo',\n    endpoint: 'https://visa.vfsglobal.com/bra/en/can/book-appointment',\n    visaTypes: ['Tourist', 'Work', 'Study'],\n    method: 'GET',\n    headers: {\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n    },\n    checkType: 'SLOT_MONITORING'\n  },\n  {\n    country: 'UK',\n    consulate: 'TLS Contact São Paulo',\n    city: 'São Paulo',\n    endpoint: 'https://uk.tlscontact.com/br/SPL/page.php?pid=calendar',\n    visaTypes: ['Tourist', 'Work', 'Study'],\n    method: 'GET',\n    headers: {\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n    },\n    checkType: 'AVAILABILITY_CHECK'\n  }\n];\n\nreturn appointmentSources.map(source => ({ json: source }));"
      },
      "id": "prepare-appointment-sources",
      "name": "Prepare Appointment Sources",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        420,
        300
      ],
      "description": ""
    },
    {
      "parameters": {
        "url": "={{ $json.endpoint }}",
        "options": {
          "headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
          },
          "timeout": 30000,
          "ignoreHttpStatusErrors": true,
          "followRedirect": true
        },
        "method": "GET"
      },
      "id": "fetch-appointment-data",
      "name": "Fetch Appointment Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        620,
        300
      ],
      "onError": "continueRegularOutput",
      "description": ""
    },
    {
      "parameters": {
        "jsCode": "// Parse appointment availability and detect changes\nconst appointmentSource = $('Prepare Appointment Sources').item.json;\nconst responseData = $json;\n\n// Handle HTTP request errors\nif (!responseData || responseData.error) {\n  return [{ \n    json: { \n      country: appointmentSource.country, \n      consulate: appointmentSource.consulate,\n      appointments: [], \n      error: responseData?.error || 'HTTP request failed',\n      checkedAt: new Date().toISOString()\n    } \n  }];\n}\n\nconst html = responseData.data || responseData.body || '';\n\nif (!html || typeof html !== 'string') {\n  return [{ \n    json: { \n      country: appointmentSource.country, \n      consulate: appointmentSource.consulate,\n      appointments: [], \n      error: 'No HTML data received or invalid response',\n      checkedAt: new Date().toISOString()\n    } \n  }];\n}\n\n// Simple HTML parsing without external dependencies\nconst appointments = [];\nconst now = new Date();\n\ntry {\n  // Basic text-based parsing for different appointment systems\n  switch (appointmentSource.checkType) {\n    case 'CALENDAR_SCAN':\n      // US Consulate - look for common date patterns\n      const dateMatches = html.match(/\\b(\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4})\\b/g) || [];\n      const timeMatches = html.match(/\\b(\\d{1,2}:\\d{2}\\s*(?:AM|PM|am|pm)?)\\b/g) || [];\n      \n      // Look for available slots indicators\n      const availableIndicators = [\n        'available', 'open', 'book now', 'schedule',\n        'disponível', 'agendar', 'reservar'\n      ];\n      \n      const hasAvailableSlots = availableIndicators.some(indicator => \n        html.toLowerCase().includes(indicator)\n      );\n      \n      if (hasAvailableSlots && dateMatches.length > 0) {\n        dateMatches.slice(0, 10).forEach((dateStr, index) => {\n          try {\n            const appointmentDate = new Date(dateStr);\n            if (appointmentDate > now) {\n              appointments.push({\n                date: dateStr,\n                time: timeMatches[index] || 'Time TBD',\n                datetime: appointmentDate.toISOString(),\n                type: 'AVAILABLE_SLOT',\n                slotsRemaining: 1,\n                lastSeen: now.toISOString(),\n                source: 'text_parsing'\n              });\n            }\n          } catch (e) {\n            // Skip invalid dates\n          }\n        });\n      }\n      break;\n      \n    case 'SLOT_MONITORING':\n      // VFS Global - look for slot availability\n      const slotIndicators = html.match(/slot[s]?\\s*available|\\d+\\s*slot[s]?/gi) || [];\n      const vfsDateMatches = html.match(/\\b(\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4})\\b/g) || [];\n      \n      if (slotIndicators.length > 0 && vfsDateMatches.length > 0) {\n        vfsDateMatches.slice(0, 5).forEach(dateStr => {\n          try {\n            const appointmentDate = new Date(dateStr);\n            if (appointmentDate > now) {\n              appointments.push({\n                date: dateStr,\n                datetime: appointmentDate.toISOString(),\n                type: 'MULTIPLE_SLOTS',\n                slotsRemaining: slotIndicators.length,\n                lastSeen: now.toISOString(),\n                source: 'text_parsing'\n              });\n            }\n          } catch (e) {\n            // Skip invalid dates\n          }\n        });\n      }\n      break;\n      \n    case 'AVAILABILITY_CHECK':\n      // TLS Contact - simple availability check\n      const tlsDateMatches = html.match(/\\b(\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4})\\b/g) || [];\n      const hasBookingOptions = html.toLowerCase().includes('book') || \n                               html.toLowerCase().includes('available') ||\n                               html.toLowerCase().includes('select');\n      \n      if (hasBookingOptions && tlsDateMatches.length > 0) {\n        tlsDateMatches.slice(0, 5).forEach(dateStr => {\n          try {\n            const appointmentDate = new Date(dateStr);\n            if (appointmentDate > now) {\n              appointments.push({\n                date: dateStr,\n                datetime: appointmentDate.toISOString(),\n                type: 'DAY_AVAILABLE',\n                slotsRemaining: 'unknown',\n                lastSeen: now.toISOString(),\n                source: 'text_parsing'\n              });\n            }\n          } catch (e) {\n            // Skip invalid dates\n          }\n        });\n      }\n      break;\n  }\n  \n  // Sort appointments by date\n  appointments.sort((a, b) => new Date(a.datetime) - new Date(b.datetime));\n  \n  // Filter appointments within next 60 days (cancellation/reschedule window)\n  const sixtyDaysFromNow = new Date(now.getTime() + 60 * 24 * 60 * 60 * 1000);\n  const relevantAppointments = appointments.filter(apt => \n    new Date(apt.datetime) <= sixtyDaysFromNow\n  );\n  \n  return [{\n    json: {\n      country: appointmentSource.country,\n      consulate: appointmentSource.consulate,\n      city: appointmentSource.city,\n      visaTypes: appointmentSource.visaTypes,\n      appointments: relevantAppointments,\n      totalSlots: relevantAppointments.length,\n      earliestDate: relevantAppointments[0]?.date || null,\n      checkedAt: now.toISOString(),\n      hasNewSlots: relevantAppointments.length > 0,\n      parsingMethod: 'text_based',\n      responseSize: html.length\n    }\n  }];\n  \n} catch (error) {\n  return [{\n    json: {\n      country: appointmentSource.country,\n      consulate: appointmentSource.consulate,\n      appointments: [],\n      error: `Parsing error: ${error.message}`,\n      checkedAt: now.toISOString()\n    }\n  }];\n}"
      },
      "id": "parse-appointment-data",
      "name": "Parse Appointment Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        820,
        300
      ],
      "description": ""
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/n8n/webhook",
        "options": {
          "headers": {
            "Content-Type": "application/json",
            "x-webhook-secret": "visa2any_webhook_secret_2024"
          },
          "body": {
            "action": "executeQuery",
            "data": {
              "query": "SELECT appointment_data, detected_at FROM appointment_monitoring WHERE country = ? AND consulate = ? ORDER BY detected_at DESC LIMIT 1",
              "values": ["{{ $json.country }}", "{{ $json.consulate }}"]
            }
          }
        },
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  action: 'executeQuery',\n  data: {\n    query: 'SELECT appointment_data, detected_at FROM appointment_monitoring WHERE country = ? AND consulate = ? ORDER BY detected_at DESC LIMIT 1',\n    values: [$json.country, $json.consulate]\n  }\n}) }}"
      },
      "id": "check-previous-appointments",
      "name": "Check Previous Appointments",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1020,
        300
      ],
      "onError": "continueRegularOutput",
      "description": ""
    },
    {
      "parameters": {
        "jsCode": "// Initialize database tables if they don't exist\nconst createTablesSQL = `\nCREATE TABLE IF NOT EXISTS appointment_monitoring (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    country TEXT NOT NULL,\n    consulate TEXT NOT NULL,\n    city TEXT,\n    visa_type TEXT,\n    change_type TEXT,\n    detected_at DATETIME,\n    availability_window TEXT,\n    appointment_data TEXT,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE IF NOT EXISTS clients (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    email TEXT,\n    phone TEXT,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE IF NOT EXISTS appointment_waitlist (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    client_id INTEGER,\n    country TEXT NOT NULL,\n    consulate TEXT NOT NULL,\n    preferred_date_range_start DATE,\n    preferred_date_range_end DATE,\n    notification_methods TEXT DEFAULT '[\"whatsapp\"]',\n    max_notice_hours INTEGER DEFAULT 24,\n    priority INTEGER DEFAULT 1,\n    status TEXT DEFAULT 'ACTIVE',\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (client_id) REFERENCES clients(id)\n);\n`;\n\n// Execute table creation (this will be ignored if tables exist)\ntry {\n  // This is just a placeholder - actual table creation should be done via SQLite node\n  console.log('Tables should be created via separate SQLite node');\n} catch (e) {\n  console.log('Table creation handled elsewhere');\n}\n\n// Detect new appointments and cancellations\nconst currentData = $('Parse Appointment Data').item.json;\nconst previousQueryResult = $input.all();\n\nlet changeDetected = false;\nlet newAppointments = [];\nlet changes = [];\nlet previousData = null;\n\n// Handle case where previous query returned results\nif (previousQueryResult.length > 0 && previousQueryResult[0].json) {\n  previousData = previousQueryResult[0].json;\n}\n\nif (!previousData || !previousData.appointment_data) {\n  // First time checking - all appointments are \"new\"\n  changeDetected = currentData.hasNewSlots;\n  newAppointments = currentData.appointments || [];\n  \n  if (newAppointments.length > 0) {\n    changes.push({\n      type: 'INITIAL_SCAN',\n      description: `Initial scan found ${currentData.totalSlots} available slots`,\n      appointments: newAppointments\n    });\n  }\n} else {\n  // Compare with previous scan\n  let prevAppointments = [];\n  try {\n    prevAppointments = JSON.parse(previousData.appointment_data || '[]');\n  } catch (e) {\n    prevAppointments = [];\n  }\n  \n  const currentAppointments = currentData.appointments || [];\n  \n  // Find truly new appointments (within 30 days - likely cancellations)\n  const thirtyDaysFromNow = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);\n  \n  newAppointments = currentAppointments.filter(current => {\n    // Check if this appointment slot is within 30 days (priority window)\n    const appointmentDate = new Date(current.datetime);\n    const isWithinPriorityWindow = appointmentDate <= thirtyDaysFromNow;\n    \n    // Check if this slot existed in previous scan\n    const existedBefore = prevAppointments.some(prev => \n      prev.date === current.date && \n      (prev.time === current.time || (!prev.time && !current.time))\n    );\n    \n    return isWithinPriorityWindow && !existedBefore;\n  });\n  \n  // Detect cancellations (slots that disappeared)\n  const cancelledAppointments = prevAppointments.filter(prev => {\n    const stillExists = currentAppointments.some(current => \n      current.date === prev.date && \n      (current.time === prev.time || (!current.time && !prev.time))\n    );\n    return !stillExists;\n  });\n  \n  if (newAppointments.length > 0) {\n    changeDetected = true;\n    changes.push({\n      type: 'NEW_SLOTS_DETECTED',\n      description: `${newAppointments.length} new appointment slots detected`,\n      appointments: newAppointments\n    });\n  }\n  \n  if (cancelledAppointments.length > 0) {\n    changes.push({\n      type: 'SLOTS_CANCELLED',\n      description: `${cancelledAppointments.length} appointment slots no longer available`,\n      appointments: cancelledAppointments\n    });\n  }\n}\n\n// Only proceed if we detected meaningful changes\nif (changeDetected && newAppointments.length > 0) {\n  return [{\n    json: {\n      ...currentData,\n      newAppointments,\n      changes,\n      changeDetected: true,\n      prioritySlots: newAppointments.filter(apt => {\n        const appointmentDate = new Date(apt.datetime);\n        const sevenDaysFromNow = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);\n        return appointmentDate <= sevenDaysFromNow;\n      }),\n      previousScan: previousData?.detected_at || null,\n      scanComparison: {\n        previousSlots: previousData ? JSON.parse(previousData.appointment_data || '[]').length : 0,\n        currentSlots: currentData.totalSlots,\n        newSlots: newAppointments.length\n      }\n    }\n  }];\n} else {\n  // No significant changes, but still log the scan\n  return [{\n    json: {\n      ...currentData,\n      newAppointments: [],\n      changes: [],\n      changeDetected: false,\n      prioritySlots: [],\n      scanType: 'NO_CHANGES'\n    }\n  }];\n}"
      },
      "id": "detect-appointment-changes",
      "name": "Detect Appointment Changes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1220,
        300
      ],
      "description": ""
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/n8n/webhook",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  action: 'insert',\n  data: {\n    table: 'appointment_monitoring',\n    columns: 'country,consulate,city,visa_type,change_type,detected_at,availability_window,appointment_data',\n    values: [\n      $json.country,\n      $json.consulate,\n      $json.city,\n      JSON.stringify($json.visaTypes),\n      $json.changeDetected ? 'NEW_SLOTS' : 'NO_CHANGE',\n      $json.checkedAt,\n      JSON.stringify({total_slots: $json.totalSlots, earliest_date: $json.earliestDate, priority_slots: $json.prioritySlots?.length || 0}),\n      JSON.stringify($json.appointments)\n    ]\n  }\n}) }}",
        "options": {
          "headers": {
            "Content-Type": "application/json",
            "x-webhook-secret": "visa2any_webhook_secret_2024"
          }
        }
      },
      "id": "log-appointment-changes",
      "name": "Log Appointment Changes",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1420,
        200
      ],
      "onError": "continueRegularOutput",
      "description": ""
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/n8n/webhook",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  action: 'executeQuery',\n  data: {\n    query: 'SELECT aw.*, c.name, c.email, c.phone FROM appointment_waitlist aw LEFT JOIN clients c ON aw.client_id = c.id WHERE aw.country = ? AND aw.consulate = ? AND aw.status = \\'ACTIVE\\' ORDER BY aw.priority DESC, aw.created_at ASC',\n    values: [$json.country, $json.consulate]\n  }\n}) }}",
        "options": {
          "headers": {
            "Content-Type": "application/json",
            "x-webhook-secret": "visa2any_webhook_secret_2024"
          }
        }
      },
      "id": "find-interested-clients",
      "name": "Find Interested Clients",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1420,
        400
      ],
      "onError": "continueRegularOutput",
      "description": ""
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.changeDetected }}",
              "value2": true
            },
            {
              "value1": "={{ $json.newAppointments?.length || 0 }}",
              "operation": "larger",
              "value2": 0
            }
          ],
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          }
        },
        "combineOperation": "all"
      },
      "id": "filter-significant-changes",
      "name": "Filter Significant Changes",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [
        1620,
        300
      ],
      "description": ""
    },
    {
      "parameters": {
        "jsCode": "// Prepare urgent notifications for interested clients\n// Get data from the current input instead of referencing other nodes\nconst inputData = $input.all();\nconst appointmentData = inputData[0]?.json || {};\n\n// Create mock interested clients data for testing\n// In production, this would come from database query\nconst interestedClientsData = [\n  {\n    json: {\n      id: 1,\n      client_id: 1,\n      name: 'João Silva',\n      email: 'joao@email.com',\n      phone: '+5511999999999',\n      preferred_date_range_start: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      preferred_date_range_end: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      notification_methods: '[\"whatsapp\"]',\n      max_notice_hours: 24,\n      priority: 1,\n      status: 'ACTIVE'\n    }\n  },\n  {\n    json: {\n      id: 2,\n      client_id: 2,\n      name: 'Maria Santos',\n      email: 'maria@email.com',\n      phone: '+5511888888888',\n      preferred_date_range_start: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      preferred_date_range_end: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      notification_methods: '[\"whatsapp\", \"email\"]',\n      max_notice_hours: 12,\n      priority: 2,\n      status: 'ACTIVE'\n    }\n  }\n];\n\nif (!interestedClientsData || interestedClientsData.length === 0) {\n  return [{\n    json: {\n      message: 'No interested clients found for this consulate',\n      country: appointmentData.country,\n      consulate: appointmentData.consulate,\n      newSlots: appointmentData.newAppointments?.length || 0\n    }\n  }];\n}\n\nconst interestedClients = interestedClientsData.map(item => item.json);\nconst notifications = [];\nconst prioritySlots = appointmentData.prioritySlots || [];\nconst allNewSlots = appointmentData.newAppointments || [];\n\n// Sort clients by priority and filter by their preferences\nconst eligibleClients = interestedClients.filter(client => {\n  // Check if any new slots match client's preferred date range\n  if (client.preferred_date_range_start && client.preferred_date_range_end) {\n    const preferredStart = new Date(client.preferred_date_range_start);\n    const preferredEnd = new Date(client.preferred_date_range_end);\n    \n    return allNewSlots.some(slot => {\n      const slotDate = new Date(slot.datetime);\n      return slotDate >= preferredStart && slotDate <= preferredEnd;\n    });\n  }\n  \n  // If no specific range, include all clients\n  return true;\n});\n\nfor (const client of eligibleClients) {\n  const relevantSlots = allNewSlots.filter(slot => {\n    if (client.preferred_date_range_start && client.preferred_date_range_end) {\n      const preferredStart = new Date(client.preferred_date_range_start);\n      const preferredEnd = new Date(client.preferred_date_range_end);\n      const slotDate = new Date(slot.datetime);\n      return slotDate >= preferredStart && slotDate <= preferredEnd;\n    }\n    return true;\n  });\n  \n  if (relevantSlots.length === 0) continue;\n  \n  const earliestSlot = relevantSlots[0];\n  const isPriority = prioritySlots.length > 0;\n  \n  // Create urgency-based message\n  let urgencyLevel = 'NORMAL';\n  let urgencyEmoji = '📅';\n  let urgencyText = 'Nova vaga disponível';\n  \n  if (isPriority) {\n    urgencyLevel = 'URGENT';\n    urgencyEmoji = '🚨';\n    urgencyText = 'VAGA URGENTE! Próximos 7 dias';\n  } else if (relevantSlots.length === 1) {\n    urgencyLevel = 'HIGH';\n    urgencyEmoji = '⚡';\n    urgencyText = 'Vaga limitada disponível';\n  }\n  \n  const whatsappMessage = `${urgencyEmoji} *${urgencyText.toUpperCase()}*\\n\\n` +\n    `🏛️ *${appointmentData.consulate}*\\n` +\n    `🌍 *País:* ${appointmentData.country}\\n` +\n    `📍 *Cidade:* ${appointmentData.city}\\n\\n` +\n    `📅 *Datas Disponíveis:*\\n${relevantSlots.slice(0, 5).map(slot => {\n      const date = new Date(slot.datetime).toLocaleDateString('pt-BR');\n      const time = slot.time && slot.time !== 'Time TBD' ? ` às ${slot.time}` : '';\n      return `• ${date}${time}`;\n    }).join('\\n')}\\n\\n` +\n    `${relevantSlots.length > 5 ? `...e mais ${relevantSlots.length - 5} datas\\n\\n` : ''}` +\n    `⚡ *AÇÃO RÁPIDA NECESSÁRIA!*\\n` +\n    `📞 Responda \"SIM\" para agendar AGORA\\n` +\n    `⏰ Ou ligue: (11) 99999-9999\\n\\n` +\n    `💨 Vagas se esgotam rapidamente!`;\n  \n  // Determine notification methods\n  let notificationMethods = ['whatsapp'];\n  try {\n    if (client.notification_methods) {\n      notificationMethods = JSON.parse(client.notification_methods);\n    }\n  } catch (e) {\n    notificationMethods = ['whatsapp'];\n  }\n  \n  notifications.push({\n    json: {\n      clientId: client.client_id || client.id,\n      clientName: client.name || 'Cliente',\n      clientEmail: client.email,\n      clientPhone: client.phone,\n      urgencyLevel,\n      whatsappMessage,\n      notificationMethods,\n      appointmentData: {\n        country: appointmentData.country,\n        consulate: appointmentData.consulate,\n        city: appointmentData.city,\n        totalNewSlots: allNewSlots.length,\n        prioritySlots: prioritySlots.length,\n        relevantSlots: relevantSlots.length,\n        earliestDate: earliestSlot.date,\n        earliestTime: earliestSlot.time\n      },\n      maxNoticeHours: client.max_notice_hours || 24,\n      priority: client.priority || 1,\n      waitlistId: client.id\n    }\n  });\n}\n\n// Sort notifications by client priority\nnotifications.sort((a, b) => b.json.priority - a.json.priority);\n\nif (notifications.length === 0) {\n  return [{\n    json: {\n      message: 'No eligible clients found for the available slots',\n      totalClients: interestedClients.length,\n      eligibleClients: eligibleClients.length,\n      newSlots: allNewSlots.length\n    }\n  }];\n}\n\nreturn notifications;"
      },
      "id": "prepare-urgent-notifications",
      "name": "Prepare Urgent Notifications",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1820,
        300
      ],
      "description": ""
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/notifications/whatsapp",
        "options": {
          "headers": {
            "Content-Type": "application/json",
            "Authorization": "Bearer {{ $env.VISA2ANY_API_TOKEN || 'your-api-token-here' }}"
          },
          "body": {
            "phone": "{{ $json.clientPhone }}",
            "message": "{{ $json.whatsappMessage }}",
            "priority": "{{ $json.urgencyLevel }}",
            "clientId": "{{ $json.clientId }}",
            "campaign": "URGENT_APPOINTMENT_ALERT",
            "metadata": {
              "appointmentType": "CANCELLATION_ALERT",
              "country": "{{ $json.appointmentData.country }}",
              "consulate": "{{ $json.appointmentData.consulate }}",
              "slotsAvailable": "{{ $json.appointmentData.relevantSlots }}"
            }
          },
          "timeout": 10000
        }
      },
      "id": "send-urgent-whatsapp",
      "name": "Send Urgent WhatsApp",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        2020,
        200
      ],
      "onError": "continueRegularOutput",
      "description": ""
    }
  ],
  "connections": {
    "Check Every 2 Minutes": {
      "main": [
        [
          {
            "node": "Prepare Appointment Sources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Appointment Sources": {
      "main": [
        [
          {
            "node": "Fetch Appointment Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Appointment Data": {
      "main": [
        [
          {
            "node": "Parse Appointment Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Appointment Data": {
      "main": [
        [
          {
            "node": "Check Previous Appointments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Previous Appointments": {
      "main": [
        [
          {
            "node": "Detect Appointment Changes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detect Appointment Changes": {
      "main": [
        [
          {
            "node": "Log Appointment Changes",
            "type": "main",
            "index": 0
          },
          {
            "node": "Find Interested Clients",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Appointment Changes": {
      "main": [
        [
          {
            "node": "Filter Significant Changes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Interested Clients": {
      "main": [
        [
          {
            "node": "Filter Significant Changes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Significant Changes": {
      "main": [
        [
          {
            "node": "Prepare Urgent Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Urgent Notifications": {
      "main": [
        [
          {
            "node": "Send Urgent WhatsApp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "timezone": "America/Sao_Paulo",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": {},
  "tags": [
    {
      "id": "appointment-monitoring",
      "name": "Appointment Monitoring",
      "description": ""
    },
    {
      "id": "visa2any",
      "name": "Visa2Any",
      "description": ""
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-06-14T08:00:00.000Z",
  "versionId": "1"
}