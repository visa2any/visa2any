{
  "description": "N8N workflow for Visa2Any automation platform",
  "name": "Vaga Express Analytics Dashboard",
  "version": 1,
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "0 8 * * *"
            }
          ]
        }
      },
      "id": "daily-analytics-trigger",
      "name": "Daily Analytics Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "description": ""
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/n8n/webhook",
        "options": {
          "headers": {
            "Content-Type": "application/json",
            "x-webhook-secret": "visa2any_webhook_secret_2024"
          },
          "body": {
            "action": "executeQuery",
            "data": {
              "query": "SELECT \n  DATE('now') as report_date,\n  COUNT(*) as total_active_subscriptions,\n  SUM(CASE WHEN plan = 'BASIC' THEN 1 ELSE 0 END) as basic_count,\n  SUM(CASE WHEN plan = 'PREMIUM' THEN 1 ELSE 0 END) as premium_count,\n  SUM(CASE WHEN plan = 'VIP' THEN 1 ELSE 0 END) as vip_count,\n  SUM(amount) as total_revenue,\n  AVG(amount) as avg_order_value,\n  SUM(CASE WHEN status = 'FULFILLED' THEN 1 ELSE 0 END) as successful_completions,\n  ROUND(AVG(CASE WHEN status = 'FULFILLED' THEN 1.0 ELSE 0.0 END) * 100, 2) as success_rate\nFROM vaga_express_subscriptions \nWHERE status IN ('ACTIVE', 'FULFILLED')"
            }
          }
        },
        "method": "POST"
      },
      "id": "get-subscription-metrics",
      "name": "Get Subscription Metrics",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        200,
        0
      ],
      "description": ""
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/n8n/webhook",
        "options": {
          "headers": {
            "Content-Type": "application/json",
            "x-webhook-secret": "visa2any_webhook_secret_2024"
          },
          "body": {
            "action": "executeQuery",
            "data": {
              "query": "SELECT \n  country,\n  consulate,\n  COUNT(*) as slots_detected_today,\n  SUM(CASE WHEN booking_successful = 1 THEN 1 ELSE 0 END) as successful_bookings,\n  ROUND(AVG(response_time_minutes), 2) as avg_response_time,\n  ROUND(AVG(advance_days), 1) as avg_advance_days\nFROM vaga_express_slot_history \nWHERE DATE(offered_at) = DATE('now')\nGROUP BY country, consulate\nORDER BY slots_detected_today DESC"
            }
          }
        },
        "method": "POST"
      },
      "id": "get-daily-slot-performance",
      "name": "Get Daily Slot Performance",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        200,
        150
      ],
      "description": ""
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/n8n/webhook",
        "options": {
          "headers": {
            "Content-Type": "application/json",
            "x-webhook-secret": "visa2any_webhook_secret_2024"
          },
          "body": {
            "action": "executeQuery",
            "data": {
              "query": "SELECT \n  DATE(created_at) as date,\n  plan,\n  COUNT(*) as sales_count,\n  SUM(amount) as revenue\nFROM vaga_express_subscriptions \nWHERE DATE(created_at) >= DATE('now', '-7 days')\nGROUP BY DATE(created_at), plan\nORDER BY date DESC, plan"
            }
          }
        },
        "method": "POST"
      },
      "id": "get-weekly-sales-trend",
      "name": "Get Weekly Sales Trend",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        200,
        300
      ],
      "description": ""
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/n8n/webhook",
        "options": {
          "headers": {
            "Content-Type": "application/json",
            "x-webhook-secret": "visa2any_webhook_secret_2024"
          },
          "body": {
            "action": "executeQuery",
            "data": {
              "query": "SELECT \n  vs.plan,\n  COUNT(vh.id) as total_opportunities,\n  SUM(CASE WHEN vh.booking_successful = 1 THEN 1 ELSE 0 END) as successful_bookings,\n  ROUND(AVG(vh.response_time_minutes), 2) as avg_response_time,\n  ROUND(AVG(vh.advance_days), 1) as avg_advance_days,\n  MAX(vh.offered_at) as last_opportunity\nFROM vaga_express_subscriptions vs\nLEFT JOIN vaga_express_slot_history vh ON vs.id = vh.subscription_id\nWHERE vs.status IN ('ACTIVE', 'FULFILLED')\nGROUP BY vs.plan\nORDER BY vs.plan"
            }
          }
        },
        "method": "POST"
      },
      "id": "get-plan-performance",
      "name": "Get Plan Performance",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        200,
        450
      ],
      "description": ""
    },
    {
      "parameters": {
        "jsCode": "// Consolidate all analytics data\nconst subscriptionMetrics = $('Get Subscription Metrics').item.json;\nconst dailySlotPerformance = $('Get Daily Slot Performance').all().map(item => item.json);\nconst weeklySalesTrend = $('Get Weekly Sales Trend').all().map(item => item.json);\nconst planPerformance = $('Get Plan Performance').all().map(item => item.json);\n\n// Calculate additional metrics\nconst conversionRate = subscriptionMetrics.success_rate;\nconst totalSlots = dailySlotPerformance.reduce((sum, item) => sum + item.slots_detected_today, 0);\nconst totalBookings = dailySlotPerformance.reduce((sum, item) => sum + item.successful_bookings, 0);\nconst slotConversionRate = totalSlots > 0 ? (totalBookings / totalSlots * 100).toFixed(2) : 0;\n\n// Revenue analysis\nconst revenueByPlan = {\n  basic: subscriptionMetrics.basic_count * 297,\n  premium: subscriptionMetrics.premium_count * 497,\n  vip: subscriptionMetrics.vip_count * 797\n};\n\n// Performance rankings\nconst topConsulates = dailySlotPerformance\n  .sort((a, b) => b.slots_detected_today - a.slots_detected_today)\n  .slice(0, 5);\n\nconst bestPerformingPlans = planPerformance\n  .sort((a, b) => (b.successful_bookings / (b.total_opportunities || 1)) - (a.successful_bookings / (a.total_opportunities || 1)));\n\n// Alerts and recommendations\nconst alerts = [];\nif (conversionRate < 80) {\n  alerts.push(`‚ö†Ô∏è Taxa de sucesso baixa: ${conversionRate}% (meta: 80%+)`);\n}\nif (totalSlots < 10) {\n  alerts.push(`üìâ Poucas vagas detectadas hoje: ${totalSlots} (meta: 10+)`);\n}\nif (subscriptionMetrics.vip_count < subscriptionMetrics.basic_count * 0.2) {\n  alerts.push(`üí∞ Oportunidade de upsell: ${subscriptionMetrics.vip_count} VIP vs ${subscriptionMetrics.basic_count} Basic`);\n}\n\n// Weekly trend analysis\nconst thisWeekRevenue = weeklySalesTrend\n  .filter(item => new Date(item.date) >= new Date(Date.now() - 7 * 24 * 60 * 60 * 1000))\n  .reduce((sum, item) => sum + item.revenue, 0);\n\nreturn [{\n  json: {\n    reportDate: subscriptionMetrics.report_date,\n    summary: {\n      totalActiveSubscriptions: subscriptionMetrics.total_active_subscriptions,\n      totalRevenue: subscriptionMetrics.total_revenue,\n      avgOrderValue: subscriptionMetrics.avg_order_value,\n      successRate: conversionRate,\n      thisWeekRevenue\n    },\n    planBreakdown: {\n      basic: { count: subscriptionMetrics.basic_count, revenue: revenueByPlan.basic },\n      premium: { count: subscriptionMetrics.premium_count, revenue: revenueByPlan.premium },\n      vip: { count: subscriptionMetrics.vip_count, revenue: revenueByPlan.vip }\n    },\n    dailyPerformance: {\n      totalSlotsDetected: totalSlots,\n      totalBookings: totalBookings,\n      slotConversionRate: slotConversionRate,\n      topConsulates\n    },\n    planPerformance,\n    weeklySalesTrend,\n    alerts,\n    kpis: {\n      revenueGrowth: 'N/A', // Would need historical data\n      customerSatisfaction: 'N/A', // Would need survey data\n      churnRate: 'N/A', // Would need cancellation data\n      avgTimeToSuccess: planPerformance.length > 0 ? \n        (planPerformance.reduce((sum, p) => sum + (p.avg_advance_days || 0), 0) / planPerformance.length).toFixed(1) : 'N/A'\n    }\n  }\n}];"
      },
      "id": "consolidate-analytics",
      "name": "Consolidate Analytics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        200
      ],
      "description": ""
    },
    {
      "parameters": {
        "jsCode": "// Generate executive dashboard message\nconst data = $json;\nconst reportDate = new Date(data.reportDate).toLocaleDateString('pt-BR');\n\nconst dashboardMessage = `üìä *VAGA EXPRESS - DASHBOARD EXECUTIVO* üìä\\n\\n` +\n  `üìÖ *Relat√≥rio:* ${reportDate}\\n\\n` +\n  `üí∞ *RECEITA & VENDAS:*\\n` +\n  `‚Ä¢ Total acumulado: R$ ${data.summary.totalRevenue.toLocaleString('pt-BR')}\\n` +\n  `‚Ä¢ Esta semana: R$ ${data.summary.thisWeekRevenue.toLocaleString('pt-BR')}\\n` +\n  `‚Ä¢ Ticket m√©dio: R$ ${data.summary.avgOrderValue.toFixed(0)}\\n` +\n  `‚Ä¢ Assinaturas ativas: ${data.summary.totalActiveSubscriptions}\\n\\n` +\n  \n  `üéØ *BREAKDOWN POR PLANO:*\\n` +\n  `ü•â Basic: ${data.planBreakdown.basic.count} clientes (R$ ${data.planBreakdown.basic.revenue.toLocaleString('pt-BR')})\\n` +\n  `ü•à Premium: ${data.planBreakdown.premium.count} clientes (R$ ${data.planBreakdown.premium.revenue.toLocaleString('pt-BR')})\\n` +\n  `ü•á VIP: ${data.planBreakdown.vip.count} clientes (R$ ${data.planBreakdown.vip.revenue.toLocaleString('pt-BR')})\\n\\n` +\n  \n  `‚ö° *PERFORMANCE OPERACIONAL:*\\n` +\n  `‚Ä¢ Taxa de sucesso: ${data.summary.successRate}%\\n` +\n  `‚Ä¢ Vagas detectadas hoje: ${data.dailyPerformance.totalSlotsDetected}\\n` +\n  `‚Ä¢ Agendamentos realizados: ${data.dailyPerformance.totalBookings}\\n` +\n  `‚Ä¢ Taxa de aproveitamento: ${data.dailyPerformance.slotConversionRate}%\\n\\n` +\n  \n  `üèÜ *TOP CONSULADOS HOJE:*\\n${data.dailyPerformance.topConsulates.slice(0, 3).map((c, i) => \n    `${i + 1}. ${c.consulate}: ${c.slots_detected_today} vagas`\n  ).join('\\n')}\\n\\n` +\n  \n  `üìà *KPIs PRINCIPAIS:*\\n` +\n  `‚Ä¢ Tempo m√©dio para sucesso: ${data.kpis.avgTimeToSuccess} dias\\n` +\n  `‚Ä¢ Consulados monitorados: ${new Set(data.dailyPerformance.topConsulates.map(c => c.country)).size} pa√≠ses\\n\\n`;\n\n// Add alerts if any\nlet alertSection = '';\nif (data.alerts.length > 0) {\n  alertSection = `üö® *ALERTAS:*\\n${data.alerts.join('\\n')}\\n\\n`;\n}\n\n// Performance recommendations\nlet recommendations = `üí° *RECOMENDA√á√ïES:*\\n`;\nif (data.planBreakdown.vip.count < data.planBreakdown.basic.count * 0.2) {\n  recommendations += `‚Ä¢ Campanha de upsell para VIP\\n`;\n}\nif (data.dailyPerformance.slotConversionRate < 50) {\n  recommendations += `‚Ä¢ Otimizar velocidade de notifica√ß√£o\\n`;\n}\nif (data.summary.successRate < 85) {\n  recommendations += `‚Ä¢ Revisar estrat√©gia de monitoramento\\n`;\n}\n\nconst finalMessage = dashboardMessage + alertSection + recommendations + \n  `\\nüîÑ *Pr√≥ximo relat√≥rio:* ${new Date(Date.now() + 24 * 60 * 60 * 1000).toLocaleDateString('pt-BR')}`;\n\nreturn [{ json: { ...data, dashboardMessage: finalMessage } }];"
      },
      "id": "generate-dashboard-message",
      "name": "Generate Dashboard Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        600,
        200
      ],
      "description": ""
    },
    {
      "parameters": {
        "message": "{{ $json.dashboardMessage }}",
        "chatId": "-1001234567890",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "send-dashboard-telegram",
      "name": "Send Dashboard Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 4,
      "position": [
        800,
        150
      ],
      "description": ""
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/notifications/email",
        "options": {
          "headers": {
            "Content-Type": "application/json",
            "Authorization": "Bearer {{ $env.VISA2ANY_API_TOKEN }}"
          },
          "body": {
            "to": "equipe@visa2any.com",
            "subject": "üìä Vaga Express - Dashboard Executivo {{ new Date().toLocaleDateString('pt-BR') }}",
            "template": "executive-dashboard",
            "priority": "MEDIUM",
            "data": {
              "reportDate": "{{ $json.reportDate }}",
              "summary": "{{ $json.summary }}",
              "planBreakdown": "{{ $json.planBreakdown }}",
              "dailyPerformance": "{{ $json.dailyPerformance }}",
              "alerts": "{{ $json.alerts }}",
              "kpis": "{{ $json.kpis }}"
            }
          }
        }
      },
      "id": "send-dashboard-email",
      "name": "Send Dashboard Email",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        800,
        250
      ],
      "description": ""
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/n8n/webhook",
        "options": {
          "headers": {
            "Content-Type": "application/json",
            "x-webhook-secret": "visa2any_webhook_secret_2024"
          },
          "body": {
            "action": "insert",
            "data": {
              "table": "vaga_express_metrics",
              "columns": "date, basic_sales, premium_sales, vip_sales, total_revenue, slots_detected, successful_bookings, conversion_rate, avg_advance_days, created_at",
              "values": ["{{ $json.reportDate }}", "{{ $json.planBreakdown.basic.count }}", "{{ $json.planBreakdown.premium.count }}", "{{ $json.planBreakdown.vip.count }}", "{{ $json.summary.totalRevenue }}", "{{ $json.dailyPerformance.totalSlotsDetected }}", "{{ $json.dailyPerformance.totalBookings }}", "{{ $json.summary.successRate }}", "{{ $json.kpis.avgTimeToSuccess }}", "{{ new Date().toISOString() }}"]
            }
          }
        },
        "method": "POST"
      },
      "id": "save-daily-metrics",
      "name": "Save Daily Metrics",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1000,
        200
      ],
      "description": ""
    }
  ],
  "connections": {
    "Daily Analytics Trigger": {
      "main": [
        [
          {
            "node": "Get Subscription Metrics",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Daily Slot Performance",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Weekly Sales Trend",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Plan Performance",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Subscription Metrics": {
      "main": [
        [
          {
            "node": "Consolidate Analytics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Daily Slot Performance": {
      "main": [
        [
          {
            "node": "Consolidate Analytics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Weekly Sales Trend": {
      "main": [
        [
          {
            "node": "Consolidate Analytics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Plan Performance": {
      "main": [
        [
          {
            "node": "Consolidate Analytics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consolidate Analytics": {
      "main": [
        [
          {
            "node": "Generate Dashboard Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Dashboard Message": {
      "main": [
        [
          {
            "node": "Send Dashboard Telegram",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Dashboard Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Dashboard Telegram": {
      "main": [
        [
          {
            "node": "Save Daily Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Dashboard Email": {
      "main": [
        [
          {
            "node": "Save Daily Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "timezone": "America/Sao_Paulo"
  }
}