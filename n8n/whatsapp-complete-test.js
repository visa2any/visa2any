// Teste completo da implementa√ß√£o WhatsApp
console.log('üß™ INICIANDO TESTE COMPLETO DO WHATSAPP\n');

// 1. Teste da API principal
async function testMainAPI() {
    console.log('1Ô∏è‚É£ Testando API principal do WhatsApp...');
    
    try {
        const response = await fetch('http://localhost:3001/whatsapp/send', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                phone: '5511987654321',
                message: '‚úÖ Teste da API principal: Funcionando perfeitamente!',
                clientId: 'test-001',
                campaign: 'api_test'
            })
        });
        
        const result = await response.json();
        console.log('   ‚úÖ Resultado:', result);
        return result.success;
    } catch (error) {
        console.log('   ‚ùå Erro:', error.message);
        return false;
    }
}

// 2. Teste do Health Check
async function testHealthCheck() {
    console.log('\n2Ô∏è‚É£ Testando Health Check...');
    
    try {
        const response = await fetch('http://localhost:3001/health');
        const result = await response.json();
        console.log('   ‚úÖ Status do servi√ßo:', result);
        return result.status === 'running';
    } catch (error) {
        console.log('   ‚ùå Erro:', error.message);
        return false;
    }
}

// 3. Teste de m√∫ltiplas mensagens
async function testBulkMessages() {
    console.log('\n3Ô∏è‚É£ Testando envio em lote...');
    
    const messages = [
        {
            phone: '5511987654321',
            message: 'üéâ Mensagem 1: Boas-vindas!',
            clientId: 'test-002'
        },
        {
            phone: '5511987654321', 
            message: 'üìä Mensagem 2: An√°lise pronta!',
            clientId: 'test-003'
        },
        {
            phone: '5511987654321',
            message: 'üìÖ Mensagem 3: Lembrete de consultoria!',
            clientId: 'test-004'
        }
    ];
    
    let successCount = 0;
    
    for (const msg of messages) {
        try {
            const response = await fetch('http://localhost:3001/whatsapp/send', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(msg)
            });
            
            const result = await response.json();
            if (result.success) {
                successCount++;
                console.log(`   ‚úÖ Mensagem ${successCount} enviada`);
            } else {
                console.log(`   ‚ùå Falha na mensagem ${successCount + 1}`);
            }
            
            // Rate limiting
            await new Promise(resolve => setTimeout(resolve, 1000));
            
        } catch (error) {
            console.log(`   ‚ùå Erro na mensagem ${successCount + 1}:`, error.message);
        }
    }
    
    console.log(`   üìä Resumo: ${successCount}/${messages.length} mensagens enviadas`);
    return successCount === messages.length;
}

// 4. Teste de templates 
async function testTemplates() {
    console.log('\n4Ô∏è‚É£ Testando templates de mensagem...');
    
    const templates = [
        {
            name: 'Boas-vindas',
            message: 'üåé Ol√°! Bem-vindo(a) √† Visa2Any!\n\nEstamos muito animados para ajud√°-lo(a) a realizar seu sonho internacional! üéâ'
        },
        {
            name: 'An√°lise pronta',
            message: 'üéâ √ìtimas not√≠cias!\n\nSua an√°lise de elegibilidade est√° pronta! üìä\n\n‚úÖ Score: 85/100\n‚úÖ Visto recomendado: Turismo'
        },
        {
            name: 'Follow-up',
            message: 'üëã Como est√° seu processo?\n\nüìä Status atual: Em andamento\nüìÖ √öltima atividade: Hoje\n\nPrecisa de ajuda? üòä'
        }
    ];
    
    let successCount = 0;
    
    for (const template of templates) {
        try {
            const response = await fetch('http://localhost:3001/whatsapp/send', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    phone: '5511987654321',
                    message: template.message,
                    clientId: `template-test-${Date.now()}`,
                    campaign: template.name.toLowerCase().replace(' ', '_')
                })
            });
            
            const result = await response.json();
            if (result.success) {
                successCount++;
                console.log(`   ‚úÖ Template "${template.name}" enviado`);
            } else {
                console.log(`   ‚ùå Falha no template "${template.name}"`);
            }
            
            await new Promise(resolve => setTimeout(resolve, 800));
            
        } catch (error) {
            console.log(`   ‚ùå Erro no template "${template.name}":`, error.message);
        }
    }
    
    console.log(`   üìä Templates: ${successCount}/${templates.length} enviados`);
    return successCount === templates.length;
}

// 5. Relat√≥rio final
async function generateReport(results) {
    console.log('\nüìã RELAT√ìRIO FINAL DO TESTE WHATSAPP');
    console.log('=====================================');
    
    const testResults = [
        { name: 'API Principal', status: results.mainAPI },
        { name: 'Health Check', status: results.health },
        { name: 'Envio em Lote', status: results.bulk },
        { name: 'Templates', status: results.templates }
    ];
    
    testResults.forEach(test => {
        const icon = test.status ? '‚úÖ' : '‚ùå';
        const status = test.status ? 'PASSOU' : 'FALHOU';
        console.log(`${icon} ${test.name}: ${status}`);
    });
    
    const totalPassed = testResults.filter(t => t.status).length;
    const totalTests = testResults.length;
    const percentage = ((totalPassed / totalTests) * 100).toFixed(1);
    
    console.log(`\nüìä Resultado geral: ${totalPassed}/${totalTests} (${percentage}%)`);
    
    if (percentage >= 75) {
        console.log('üéâ IMPLEMENTA√á√ÉO DO WHATSAPP: APROVADA!');
        console.log('‚úÖ O sistema est√° pronto para produ√ß√£o');
    } else {
        console.log('‚ö†Ô∏è  IMPLEMENTA√á√ÉO DO WHATSAPP: PRECISA DE AJUSTES');
        console.log('‚ùå Alguns testes falharam, revisar implementa√ß√£o');
    }
    
    console.log('\nüîß Pr√≥ximos passos para produ√ß√£o:');
    console.log('1. Conectar WhatsApp real (escanear QR Code)');
    console.log('2. Configurar n√∫meros reais nos links');
    console.log('3. Integrar com N8N workflows');
    console.log('4. Configurar monitoramento');
}

// Executar todos os testes
async function runAllTests() {
    const results = {
        mainAPI: await testMainAPI(),
        health: await testHealthCheck(),
        bulk: await testBulkMessages(),
        templates: await testTemplates()
    };
    
    await generateReport(results);
}

// Verificar se tem fetch (Node.js 18+)
if (typeof fetch === 'undefined') {
    console.log('‚ùå Este teste requer Node.js 18+ com fetch nativo');
    console.log('üí° Ou instale node-fetch: npm install node-fetch');
    process.exit(1);
}

runAllTests().catch(console.error);