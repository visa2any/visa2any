import { OpenAI } from 'openai'

interface Comment {
  id: string
  platform: 'facebook' | 'instagram' | 'linkedin' | 'twitter' | 'tiktok'
  postId: string
  authorName: string
  content: string
  timestamp: Date
  needsResponse: boolean
  sentiment: 'positive' | 'negative' | 'neutral' | 'question'
}

interface SofiaResponse {
  content: string
  shouldReply: boolean
  escalateToHuman: boolean
  tone: 'helpful' | 'professional' | 'friendly' | 'apologetic'
  includesCTA: boolean
}

// Configura√ß√£o da Sofia
const SOFIA_PERSONALITY = `
Voc√™ √© Sofia, assistente virtual especializada da Visa2Any, empresa l√≠der em consultoria de imigra√ß√£o.

PERSONALIDADE:
- Sempre simp√°tica, profissional e prestativa
- Demonstra conhecimento profundo sobre imigra√ß√£o
- Usa uma linguagem calorosa mas profissional
- Sempre oferece ajuda concreta
- Nunca promete resultados garantidos, mas demonstra confian√ßa

CONHECIMENTO ESPECIALIZADO:
- Vistos americanos (B1/B2, O1, EB1, etc.)
- Express Entry Canad√° (CRS, PNP, LMIA)
- Golden Visa Portugal e D7
- Cidadania europeia (italiana, portuguesa, alem√£)
- Austr√°lia (Skilled Migration, Work Visa)
- Processos de reuni√£o familiar

SEMPRE INCLUA:
- Emoji relevante
- Resposta √∫til e espec√≠fica
- Call-to-action quando apropriado
- Men√ß√£o √† expertise da Visa2Any

NUNCA:
- D√™ informa√ß√µes incorretas
- Prometa aprova√ß√£o garantida
- Seja impessoal ou rob√≥tica
- Ignore perguntas espec√≠ficas
`

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

// Analisar sentimento e tipo do coment√°rio
export async function analyzeComment(comment: Comment): Promise<{
  sentiment: 'positive' | 'negative' | 'neutral' | 'question'
  needsResponse: boolean
  urgency: 'high' | 'medium' | 'low'
  category: string
}> {
  try {
    const prompt = `
Analise este coment√°rio em uma postagem sobre imigra√ß√£o:

"${comment.content}"

Classifique:
1. Sentimento: positive/negative/neutral/question
2. Precisa resposta: true/false  
3. Urg√™ncia: high/medium/low
4. Categoria: pergunta_visto/elogio/reclamacao/interesse/spam/outro

Responda apenas em JSON:
`

    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.3,
      max_tokens: 100
    })

    const analysis = JSON.parse(response.choices[0].message.content || '{}')
    return analysis

  } catch (error) {
    console.error('Erro na an√°lise do coment√°rio:', error)
    return {
      sentiment: 'neutral',
      needsResponse: true,
      urgency: 'medium',
      category: 'outro'
    }
  }
}

// Gerar resposta da Sofia
export async function generateSofiaResponse(
  comment: Comment, 
  postContext: string,
  userHistory?: string[]
): Promise<SofiaResponse> {
  try {
    const prompt = `
${SOFIA_PERSONALITY}

CONTEXTO DO POST: ${postContext}

COMENT√ÅRIO RECEBIDO:
De: ${comment.authorName}
Plataforma: ${comment.platform}
Conte√∫do: "${comment.content}"

${userHistory ? `HIST√ìRICO DO USU√ÅRIO: ${userHistory.join('\n')}` : ''}

Gere uma resposta como Sofia que seja:
1. Espec√≠fica para a pergunta/coment√°rio
2. √ötil e informativa
3. Com tom apropriado para a plataforma
4. Inclua emojis relevantes
5. Termine com CTA quando apropriado

REGRAS POR PLATAFORMA:
- Instagram/TikTok: Mais casual, mais emojis
- LinkedIn: Mais profissional, formal
- Facebook: Equilibrado, amig√°vel
- Twitter: Conciso, direto

Responda em JSON:
{
  "content": "resposta da Sofia",
  "shouldReply": true/false,
  "escalateToHuman": true/false,
  "tone": "helpful/professional/friendly/apologetic",
  "includesCTA": true/false
}
`

    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7,
      max_tokens: 500
    })

    const sofiaResponse: SofiaResponse = JSON.parse(response.choices[0].message.content || '{}')
    
    // Validar resposta
    if (!sofiaResponse.content) {
      throw new Error('Resposta vazia gerada')
    }

    return sofiaResponse

  } catch (error) {
    console.error('Erro ao gerar resposta da Sofia:', error)
    
    // Resposta de fallback
    return {
      content: `Ol√° ${comment.authorName}! üòä Obrigada pelo seu coment√°rio. Nossa equipe est√° analisando e entrar√° em contato em breve. Para d√∫vidas urgentes, nos chame no WhatsApp! üì±`,
      shouldReply: true,
      escalateToHuman: false,
      tone: 'friendly',
      includesCTA: true
    }
  }
}

// Respostas pr√©-definidas para casos comuns
const QUICK_RESPONSES = {
  // Perguntas frequentes
  'quanto_custa': {
    content: `Ol√°! üòä Os valores variam conforme o tipo de visto e servi√ßos necess√°rios. Nossa consultoria inicial √© GRATUITA para avaliarmos seu caso! üìû Vamos conversar pelo WhatsApp?`,
    tone: 'helpful' as const,
    includesCTA: true
  },
  
  'tempo_processo': {
    content: `‚è∞ Os prazos variam por pa√≠s e tipo de visto. Por exemplo: EUA (3-6 meses), Canad√° (6-12 meses), Portugal (2-4 meses). Que destino te interessa? Podemos dar um cronograma espec√≠fico! üéØ`,
    tone: 'professional' as const,
    includesCTA: true
  },
  
  'documentos_necessarios': {
    content: `üìã Os documentos dependem do seu perfil e destino! Cada caso √© √∫nico. Nossa equipe faz um checklist personalizado na consultoria gratuita. Quer agendar? üì±`,
    tone: 'helpful' as const,
    includesCTA: true
  },
  
  'taxa_aprovacao': {
    content: `üìà Nossa taxa de aprova√ß√£o √© de 91.2%! Isso porque fazemos prepara√ß√£o completa: documenta√ß√£o, treinamento para entrevista e acompanhamento total. Vamos garantir que voc√™ esteja 100% preparado! ‚úÖ`,
    tone: 'professional' as const,
    includesCTA: false
  },
  
  // Respostas emocionais
  'elogio': {
    content: `Muito obrigada! ü•∞ Ficamos felizes em ajudar! Nossa miss√£o √© realizar o sonho de cada cliente. Continue acompanhando para mais dicas valiosas! ‚ú®`,
    tone: 'friendly' as const,
    includesCTA: false
  },
  
  'reclamacao': {
    content: `Sinto muito pela sua experi√™ncia. üòî Sua opini√£o √© muito importante para n√≥s. Poderia nos enviar uma mensagem privada para resolvermos isso? Nossa equipe est√° √† disposi√ß√£o! ü§ù`,
    tone: 'apologetic' as const,
    includesCTA: true
  },
  
  // CTAs espec√≠ficos por pa√≠s
  'interesse_eua': {
    content: `üá∫üá∏ Que legal seu interesse nos EUA! Temos especialistas em todos os tipos de visto americano. Quer uma an√°lise gratuita do seu perfil? Nosso sucesso √© seu sucesso! üöÄ`,
    tone: 'helpful' as const,
    includesCTA: true
  },
  
  'interesse_canada': {
    content: `üá®üá¶ O Canad√° √© uma excelente escolha! Express Entry, PNP, Study Permit... temos estrat√©gias para cada perfil. Vamos calcular sua pontua√ß√£o CRS gratuitamente? üìä`,
    tone: 'professional' as const,
    includesCTA: true
  }
}

// Detectar inten√ß√£o do usu√°rio e usar resposta r√°pida se dispon√≠vel
export function getQuickResponse(comment: Comment): SofiaResponse | null {
  const content = comment.content.toLowerCase()
  
  // Detectar perguntas sobre pre√ßo
  if (content.includes('quanto custa') || content.includes('valor') || content.includes('pre√ßo')) {
    return { ...QUICK_RESPONSES.quanto_custa, shouldReply: true, escalateToHuman: false }
  }
  
  // Detectar perguntas sobre tempo
  if (content.includes('quanto tempo') || content.includes('prazo') || content.includes('demora')) {
    return { ...QUICK_RESPONSES.tempo_processo, shouldReply: true, escalateToHuman: false }
  }
  
  // Detectar documentos
  if (content.includes('documento') || content.includes('papel') || content.includes('preciso levar')) {
    return { ...QUICK_RESPONSES.documentos_necessarios, shouldReply: true, escalateToHuman: false }
  }
  
  // Detectar taxa de aprova√ß√£o
  if (content.includes('taxa') || content.includes('aprova√ß√£o') || content.includes('chance')) {
    return { ...QUICK_RESPONSES.taxa_aprovacao, shouldReply: true, escalateToHuman: false }
  }
  
  // Detectar elogios
  if (content.includes('obrigad') || content.includes('parab√©ns') || content.includes('excelente')) {
    return { ...QUICK_RESPONSES.elogio, shouldReply: true, escalateToHuman: false }
  }
  
  // Detectar interesse em pa√≠ses
  if (content.includes('eua') || content.includes('estados unidos') || content.includes('america')) {
    return { ...QUICK_RESPONSES.interesse_eua, shouldReply: true, escalateToHuman: false }
  }
  
  if (content.includes('canad√°') || content.includes('canada')) {
    return { ...QUICK_RESPONSES.interesse_canada, shouldReply: true, escalateToHuman: false }
  }
  
  return null
}

// Publicar resposta na rede social
export async function publishCommentReply(
  platform: string,
  commentId: string,
  response: string
): Promise<boolean> {
  try {
    switch (platform) {
      case 'facebook':
        return await replyOnFacebook(commentId, response)
      case 'instagram':
        return await replyOnInstagram(commentId, response)
      case 'linkedin':
        return await replyOnLinkedIn(commentId, response)
      case 'twitter':
        return await replyOnTwitter(commentId, response)
      case 'tiktok':
        return await replyOnTikTok(commentId, response)
      default:
        console.error(`Plataforma n√£o suportada: ${platform}`)
        return false
    }
  } catch (error) {
    console.error(`Erro ao responder no ${platform}:`, error)
    return false
  }
}

// Implementa√ß√µes espec√≠ficas para cada plataforma
async function replyOnFacebook(commentId: string, response: string): Promise<boolean> {
  const accessToken = process.env.FACEBOOK_ACCESS_TOKEN
  
  const result = await fetch(`https://graph.facebook.com/${commentId}/comments`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      message: response,
      access_token: accessToken
    })
  })
  
  return result.ok
}

async function replyOnInstagram(commentId: string, response: string): Promise<boolean> {
  const accessToken = process.env.INSTAGRAM_ACCESS_TOKEN
  
  const result = await fetch(`https://graph.facebook.com/${commentId}/replies`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      message: response,
      access_token: accessToken
    })
  })
  
  return result.ok
}

async function replyOnLinkedIn(commentId: string, response: string): Promise<boolean> {
  const accessToken = process.env.LINKEDIN_ACCESS_TOKEN
  
  // LinkedIn usa API diferente para respostas
  const result = await fetch(`https://api.linkedin.com/v2/socialActions/${commentId}/comments`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${accessToken}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      text: response
    })
  })
  
  return result.ok
}

async function replyOnTwitter(commentId: string, response: string): Promise<boolean> {
  const accessToken = process.env.TWITTER_ACCESS_TOKEN
  
  const result = await fetch('https://api.twitter.com/2/tweets', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${accessToken}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      text: response,
      reply: { in_reply_to_tweet_id: commentId }
    })
  })
  
  return result.ok
}

async function replyOnTikTok(commentId: string, response: string): Promise<boolean> {
  const accessToken = process.env.TIKTOK_ACCESS_TOKEN
  
  const result = await fetch(`https://open-api.tiktok.com/comment/reply/`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${accessToken}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      comment_id: commentId,
      text: response
    })
  })
  
  return result.ok
}

// Fun√ß√£o principal para processar coment√°rios
export async function processSocialComments() {
  try {
    console.log('ü§ñ Sofia iniciando processamento de coment√°rios...')
    
    // Buscar coment√°rios pendentes de todas as plataformas
    const response = await fetch('/api/social/comments/pending')
    const pendingComments = await response.json()
    
    for (const comment of pendingComments) {
      try {
        // 1. Analisar coment√°rio
        const analysis = await analyzeComment(comment)
        
        if (!analysis.needsResponse) {
          continue
        }
        
        // 2. Tentar resposta r√°pida primeiro
        let sofiaResponse = getQuickResponse(comment)
        
        // 3. Se n√£o houver resposta r√°pida, gerar com IA
        if (!sofiaResponse) {
          const postContext = await getPostContext(comment.postId)
          sofiaResponse = await generateSofiaResponse(comment, postContext)
        }
        
        // 4. Publicar resposta se apropriado
        if (sofiaResponse.shouldReply) {
          const published = await publishCommentReply(
            comment.platform,
            comment.id,
            sofiaResponse.content
          )
          
          if (published) {
            // 5. Registrar resposta no banco
            await fetch('/api/social/comments/reply', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                commentId: comment.id,
                response: sofiaResponse.content,
                tone: sofiaResponse.tone,
                escalated: sofiaResponse.escalateToHuman
              })
            })
            
            console.log(`‚úÖ Sofia respondeu coment√°rio ${comment.id} no ${comment.platform}`)
          }
        }
        
        // 6. Escalar para humano se necess√°rio
        if (sofiaResponse.escalateToHuman) {
          await escalateToHuman(comment, sofiaResponse)
        }
        
      } catch (error) {
        console.error(`Erro ao processar coment√°rio ${comment.id}:`, error)
      }
    }
    
    console.log('‚úÖ Sofia finalizou processamento de coment√°rios')
    
  } catch (error) {
    console.error('‚ùå Erro no processamento geral de coment√°rios:', error)
  }
}

// Buscar contexto do post para melhor resposta
async function getPostContext(postId: string): Promise<string> {
  try {
    const response = await fetch(`/api/social/posts/${postId}`)
    const post = await response.json()
    
    return `Post sobre: ${post.title}\nCategoria: ${post.category}\nPa√≠s: ${post.country}`
  } catch {
    return 'Post sobre imigra√ß√£o e vistos'
  }
}

// Escalar coment√°rio para atendimento humano
async function escalateToHuman(comment: Comment, response: SofiaResponse) {
  try {
    await fetch('/api/social/escalate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        commentId: comment.id,
        platform: comment.platform,
        authorName: comment.authorName,
        content: comment.content,
        sofiaResponse: response.content,
        reason: 'Requer aten√ß√£o humana',
        priority: 'high'
      })
    })
    
    // Notificar equipe via WhatsApp/Slack
    console.log(`üö® Coment√°rio escalado para humano: ${comment.id}`)
    
  } catch (error) {
    console.error('Erro ao escalar coment√°rio:', error)
  }
}